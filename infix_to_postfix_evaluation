infix to postfix conversion::
class Solution {
    // Function to convert an infix expression to a postfix expression.
     public static int precedence(char c )
     {
         switch(c){
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
                
         }
         return -1;
     }
    public static String eval(String ch)
    {
        Stack<Character> stack=new Stack<>();
        String s=new String("");
        for(int i=0;i<ch.length();i++)
        {  char c=ch.charAt(i);
            if(Character.isLetterOrDigit(c))
            s+=c;
            else if(c=='(')
            {
                stack.push(c);
            }
            else if(c==')')
            {
                while(!stack.empty() && stack.peek()!='(')
                {
                    s+=stack.pop();
                }
                stack.pop();
            }
            else{
                while(!stack.empty() && precedence(c)<=precedence(stack.peek()))
                s+=stack.pop();
                
                stack.push(c);
            }
        }
        while(!stack.empty())
        {
            s+=stack.pop();
        }
            return s;
        
    }
    public static String infixToPostfix(String exp) {
        
        return eval(exp);
        
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

postfix evaluation::
class Solution
{
    //Function to evaluate a postfix expression.
    public static int evaluate(String s)
    {
        Stack<Integer> stack=new Stack<>();
         for(int i=0;i<s.length();i++)
         {
             char c=s.charAt(i);
             if(Character.isDigit(c))
             stack.push(c-'0');
             else
             {
                 int c1=stack.pop();
                 int c2=stack.pop();
                 if(c=='+')
                 stack.push(c2+c1);
                 else if(c=='-')
                 stack.push(c2-c1);
                 else if(c=='*')
                 stack.push(c2*c1);
                 else if(c=='/')
                 stack.push(c2/c1);
             }
         }
         return stack.pop();
    }
    public static int evaluatePostFix(String S)
    {
        int d=evaluate(S);
        return d;
    }
}
