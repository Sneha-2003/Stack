Stack Using Array::
import java.util.*;
class HelloWorld {
    int top;
    int capacity;
    int[] stack;
    HelloWorld()
    {
        top=-1;
        capacity=16;
        stack=new int[capacity];
    }
    public boolean isEmpty()
    {
        return top==-1;
    }
    public boolean isFull()
    {
        return top==capacity-1;
    }
    public void push(int data)
    {
        if(isFull())
        System.out.println("Stack is full");
        else{
            stack[++top]=data;
            System.out.println(stack[top]);
        }
        // stack[++top]=data;
    }
    public void pop()
    {
        if(isEmpty())
        System.out.println("Stack is empty!");
        else
        System.out.println(stack[top--]);
    }
    public void display()
    {  System.out.println("Stack elements are");
        for(int i=0;i<=top;i++)
        System.out.println(stack[i]);
    }
    public int peek()
    {
        return stack[top];
    }
    public static void main(String[] args) {
        HelloWorld st=new HelloWorld();
         System.out.println(st.isEmpty());
          System.out.println(st.isFull());
        st.push(3);
        st.push(5);
        st.push(7);
        st.display();
        st.pop();
        // st.peek();
         System.out.println(st.peek());
        System.out.println(st.isEmpty());
        st.display();
        
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Stack using linked list::

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Stack{
    Node top;
    int size=0;
    class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    
    public void push(int data){
        Node temp=new Node(data);
        temp.next=top;
        top=temp;
        size++;
        
    }
    public void pop()
    {
        if(top==null)
        System.out.println("Empty stack");
        else
        {
            System.out.println("Popped element is "+top.data);
            top=top.next;
            size--;
        }
    }
    public int size()
    {
        return size;
    }
    public boolean isEmpty()
    {
        return top==null;
    }
    public void display()
    {
        Node itr=top;
        System.out.println("Elements");
        while(itr.next!=null){
            System.out.print(itr.data+"->");
            itr=itr.next;
        }
        System.out.print(itr.data);
        System.out.println();
    }
    
}
class HelloWorld {
    public static void main(String[] args) {
        Stack st=new Stack();
        st.isEmpty();
        st.push(5);
         st.push(4);
          st.push(17);
           st.push(7);
           st.display();
           st.pop();
           System.out.println("Size is "+st.size());
           
        
    }
}

o/p::
Elements7->17->4->5
Popped element is 7
Size is 3
